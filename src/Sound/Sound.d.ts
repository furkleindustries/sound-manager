import { BaseNode } from '../Node/BaseNode';
import { IFade } from '../Fade/IFade';
import { ISound } from './ISound';
import { ISoundOptions } from './ISoundOptions';
import { NodeTypes } from '../enums/NodeTypes';
declare const Sound_base: {
    new (...options: any[]): {
        readonly analysisSuite: import("../AnalysisSuite/IAnalysisSuite").IAnalysisSuite | null;
        readonly __analyserNode: AnalyserNode | null;
        getAnalyserNode(): AnalyserNode;
        getOutputNode(): AnalyserNode;
        readonly type: NodeTypes;
        isWebAudio(): boolean;
        getAudioContext(): AudioContext;
        getContextCurrentTime(): number;
        getGainNode(): GainNode;
        getInputNode(): AudioNode;
        getVolume(): number;
        setVolume(value: number): import("../Node/IBaseNode").IBaseNode;
    };
} & {
    new (...args: any[]): {
        __panelRegistered: boolean;
        isPanelRegistered(): boolean;
        panelRegister(): any;
        panelUnregister(): any;
        readonly type: NodeTypes;
        isWebAudio(): boolean;
        getAudioContext(): AudioContext;
        getContextCurrentTime(): number;
        getGainNode(): GainNode;
        getInputNode(): AudioNode;
        getVolume(): number;
        setVolume(value: number): import("../Node/IBaseNode").IBaseNode;
    };
} & {
    new (...options: any[]): {
        __tags: ReadonlyArray<string>;
        readonly tags: ReadonlyArray<string>;
        hasTag(tag: string): boolean;
        addTag(tag: string): any;
        removeTag(tag: string): any;
        readonly type: NodeTypes;
        isWebAudio(): boolean;
        getAudioContext(): AudioContext;
        getContextCurrentTime(): number;
        getGainNode(): GainNode;
        getInputNode(): AudioNode;
        getVolume(): number;
        setVolume(value: number): import("../Node/IBaseNode").IBaseNode;
    };
} & typeof BaseNode;
export declare class Sound extends Sound_base implements ISound {
    readonly type: NodeTypes.Sound;
    private __audioElement;
    private __fade;
    private __pausedTime;
    private __playing;
    private readonly getManagerVolume;
    private __promise;
    private __sourceNode;
    private __startedTime;
    private __rejectOnStop;
    private __fadeGainNode;
    private __fadeOverride?;
    private __loopOverride?;
    getGroupVolume: () => number;
    constructor(options: ISoundOptions);
    private __initializeSoundForWebAudio;
    private __initializeArgumentProperties;
    getInputNode(): AudioBufferSourceNode;
    getSourceNode(): AudioBufferSourceNode;
    getFadeGainNode(): GainNode;
    setVolume(value: number): this;
    getTrackPosition(): number;
    setTrackPosition(seconds: number): this;
    getDuration(): number;
    isPlaying(): boolean;
    getLoop(): boolean;
    setLoop(loop: boolean): this;
    getFade(): IFade | null;
    setFade(fade: IFade | null): this;
    play(fadeOverride?: IFade, loopOverride?: boolean): Promise<Event>;
    private __initializeForPlay;
    private __regenerateSourceNode;
    private __updateSoundTimes;
    private __initializeFadeForPlay;
    private __initializeStopRejector;
    private __initializePromiseForPlay;
    private __initializeEventsForPlay;
    pause(): this;
    private __clearScheduledFades;
    stop(): this;
    rewind(seconds: number): this;
    fastForward(seconds: number): this;
    updateAudioElementVolume(): this;
    getFadeVolume(): number;
}
export {};
