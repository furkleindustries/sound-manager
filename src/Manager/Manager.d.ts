import { BaseNode } from '../Node/BaseNode';
import { ICreateSoundOptions } from '../Sound/ICreateSoundOptions';
import { IGroup } from '../Group/IGroup';
import { IGroupOptions } from '../Group/IGroupOptions';
import { IGroupsMap } from './IGroupsMap';
import { IPanelRegisterableNode } from '../Node/IPanelRegisterableNode';
import { IPlaylist } from '../Playlist/IPlaylist';
import { IPlaylistsMap } from './IPlaylistsMap';
import { IPlaylistOptions } from '../Playlist/IPlaylistOptions';
import { ISound } from '../Sound/ISound';
import { ISoundGroupIdentifier } from '../interfaces/ISoundGroupIdentifier';
import { ISoundsMap } from '../Group/ISoundsMap';
import { IManager } from './IManager';
import { IManagerOptions } from './IManagerOptions';
import { NodeTypes } from '../enums/NodeTypes';
declare const Manager_base: {
    new (...options: any[]): {
        readonly analysisSuite: import("../AnalysisSuite/IAnalysisSuite").IAnalysisSuite | null;
        readonly __analyserNode: AnalyserNode | null;
        getAnalyserNode(): AnalyserNode;
        getOutputNode(): AnalyserNode;
        readonly type: NodeTypes;
        isWebAudio(): boolean;
        getAudioContext(): AudioContext;
        getContextCurrentTime(): number;
        getGainNode(): GainNode;
        getInputNode(): AudioNode;
        getVolume(): number;
        setVolume(value: number): import("../Node/IBaseNode").IBaseNode;
    };
} & typeof BaseNode;
export declare class Manager extends Manager_base implements IManager {
    readonly type: NodeTypes.Manager;
    constructor(options?: IManagerOptions);
    private __connectNodes;
    private __initializeGroups;
    private __connectGroupNodes;
    setVolume(value: number): this;
    private __groups;
    readonly groups: IGroupsMap;
    addGroup(name: string, options?: IGroupOptions): import("..").Group;
    addGroups(groups: IGroupsMap): this;
    private __initializeDefaultGroup;
    getGroup(name: string): IGroup;
    getGroups(names: string[]): IGroup[];
    getAllGroups(): IGroup[];
    getGroupsByTag(tag: string): IGroup[];
    getGroupsByTags(tags: string[], matchOneOrAll?: 'one' | 'all'): IGroup[];
    removeGroup(name: string): this;
    removeGroups(names: string | string[]): this;
    removeAllGroups(): this;
    getGroupVolume(name?: string): number;
    setGroupVolume(value: number, groupName?: string): this;
    addSound(name: string, options: string, groupName?: string): Promise<ISound>;
    addSound(name: string, options: ICreateSoundOptions, groupName?: string): Promise<ISound>;
    addSounds(sounds: ISoundsMap, groupName?: string): this;
    getSound(name: string, groupName?: string): ISound;
    getSounds(names: string[], groupName?: string): ISound[];
    getAllSounds(): ISound[];
    getSoundsByTag(tag: string): ISound[];
    getSoundsByTags(tags: string[], matchOneOrAll?: 'one' | 'all'): ISound[];
    removeSound(name: string, groupName?: string): this;
    removeSounds(names: string[], groupName?: string): this;
    removeAllSounds(groupName?: string): this;
    getSoundVolume(name: string, groupName?: string): number;
    setSoundVolume(name: string, value: number, groupName?: string): this;
    updateAllAudioElementsVolume(): this;
    private __playlists;
    readonly playlists: IPlaylistsMap;
    playGroup(name: string): Promise<Event[]>;
    playGroups(names: string[]): Promise<Event[]>;
    playSound(name: string, groupName?: string): Promise<Event>;
    playSounds(names: string[], groupName?: string): Promise<Event[]>;
    playAllSounds(groupName?: string): Promise<Event[]>;
    pauseSound(name: string, groupName?: string): this;
    pauseSounds(names: string[], groupName?: string): this;
    pauseAllSounds(groupName?: string): this;
    stopSound(name: string, groupName?: string): this;
    stopSounds(names: string[], groupName?: string): this;
    stopAllSounds(groupName?: string): this;
    addPlaylist(name: string, options: Array<ISoundGroupIdentifier | string>): IPlaylist;
    addPlaylist(name: string, options: IPlaylistOptions): IPlaylist;
    addPlaylists(playlists: IPlaylistsMap): this;
    getPlaylist(name: string): IPlaylist;
    getPlaylists(names: string[]): IPlaylist[];
    removePlaylist(name: string): this;
    removePlaylists(names: string[]): this;
    removeAllPlaylists(): this;
    playPlaylist(name: string): Promise<void>;
    private __playlistPlaySound;
    playPlaylists(names: string[]): Promise<void>;
    stopPlaylist(name: string): this;
    stopPlaylists(names: string[]): this;
    private __volumePanelElement;
    generateVolumePanelElement(): HTMLElement;
    updateVolumePanelElement(): this;
    volumePanelRegister(node: IPanelRegisterableNode): this;
    volumePanelDeregister(node: IPanelRegisterableNode): this;
}
export {};
